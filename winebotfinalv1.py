import asyncio
import json
import random
import os
from enum import Enum, auto
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

from aiohttp import web
import aisqlite 
from pathlib import Path



# --- –ö–ª–∞—Å—Å –¥–ª—è —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è JSON ---
class QuestionType(Enum):
    SPOILER = auto()
    QUIZ = auto()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---
try:
    with open("questions.json", "r", encoding="utf-8") as file:
        QUESTIONS = json.load(file)
    if not QUESTIONS:
        raise ValueError("–§–∞–π–ª questions.json –ø—É—Å—Ç!")
except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    QUESTIONS = []

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- FSM: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ---
class QuizStates(StatesGroup):
    in_quiz = State()

async def start_web_server():
    app = web.Application()
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, port=port)
    await site.start()
    print(f"–≤–µ–± —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É'{port}")


# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
async def ask_question(chat_id: int, state: FSMContext):
    if not QUESTIONS:
        await bot.send_message(chat_id, "‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥—å –≤–æ–ø—Ä–æ—Å–æ–≤, –ª–∏–±–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    data = await state.get_data()
    question_queue = data.get("question_queue", random.sample(QUESTIONS, len(QUESTIONS)))

    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥ –≤–æ–ø—Ä–æ—Å–æ–≤
    if not question_queue:
        question_queue = random.sample(QUESTIONS, len(QUESTIONS))
        await bot.send_message(chat_id, "üîÅ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥.")

    # –ë–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞ (—á—Ç–æ–±—ã –ø–æ—Ä—è–¥–æ–∫ –±—ã–ª —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ)
    question = question_queue.pop(0)
    await state.update_data(current_question=question, question_queue=question_queue)

    progress = f"[{len(QUESTIONS) - len(question_queue)}/{len(QUESTIONS)}]"

    q_type = question.get("type")
    if q_type == "spoiler":
        # –í–æ–ø—Ä–æ—Å —Å "—Å–ø–æ–π–ª–µ—Ä–æ–º" ‚Äî —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞, –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"
        await bot.send_message(
            chat_id,
            f"{progress} ‚ùì {question['question']}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç üëÄ", callback_data="reveal_answer")]
            ])
        )
    elif q_type == "quiz":
        # –í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –Ω–∏–º–∏
        buttons = [
            [InlineKeyboardButton(text=opt, callback_data=f"answer_{i}")]
            for i, opt in enumerate(question.get("options", []))
        ]
        await bot.send_message(
            chat_id,
            f"{progress} ‚ùì {question['question']}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(chat_id, "‚ùóÔ∏è –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    if not QUESTIONS:
        await message.answer("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    await state.set_state(QuizStates.in_quiz)
    await message.answer(
        "üç∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –æ –≤–∏–Ω–∞—Ö!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="start_quiz")]
        ])
    )

# --- –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ ---
@dp.callback_query(F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    await ask_question(callback.message.chat.id, state)
    await callback.answer

# --- –ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–∞ (—Å–ø–æ–π–ª–µ—Ä) ---
@dp.callback_query(F.data == "reveal_answer")
async def reveal_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    question = data.get("current_question", {})

    if not question:
        await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await callback.message.edit_text(
        f"‚ùì {question.get('question', '')}\n\n–û—Ç–≤–µ—Ç: <tg-spoiler>{question.get('answer', '')}</tg-spoiler>",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è", callback_data="next_question")]
        ])
    )
    await callback.answer()

# --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É ---
@dp.callback_query(F.data == "next_question")
async def next_question(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await ask_question(callback.message.chat.id, state)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ---
@dp.callback_query(F.data.startswith("answer_"))
async def answer_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    question = data.get("current_question", {})

    if not question:
        await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    try:
        selected_index = int(callback.data.split("_")[1])
        correct_index = question.get("correct_index", -1)

        if selected_index == correct_index:
            await callback.answer("‚úÖ –í–µ—Ä–Ω–æ!", show_alert=True)
        else:
            correct_answer = question.get("options", [])[correct_index]
            await callback.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_answer}", show_alert=True)

        await callback.message.edit_reply_markup(reply_markup=None)
        await ask_question(callback.message.chat.id, state)
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    if not QUESTIONS:
        print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    
    await start_web_server()
    print ("–±–æ—Ç –ø–∞—à–µ—Ç –∫–∞–∫ –ª–æ—à–∞–¥–∫–∞ –≤ –ø–æ–ª–µ!")
    await dp.start_polling(bot)
if __name__ == "__main__":
    asyncio.run(main())
